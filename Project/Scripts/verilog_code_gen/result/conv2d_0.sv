module conv2d_0(                               
     input wire clk,                                             
     input wire rst,                                             
     input wire load,                                             
     input wire input_valid,                                             
     input wire sof,                                             
     output wire o_sof,                                             
     output wire load_success,                                             
     output wire output_valid,                                      
     output wire [31:0] d_out[63:0],    
     input wire [31:0] d_in                                             
); 
conv2d #("weight/conv2d_0/0.txt", 2, 0, 64, 64) conv2d_0_conv2d_0(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(load_success),
	.output_valid(output_valid),
	.sof(sof),
	.o_sof(o_sof),
	.d_in(d_in),
	.d_out(d_out[0])
);
conv2d #("weight/conv2d_0/1.txt", 2, 0, 64, 64) conv2d_0_conv2d_1(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[1])
);
conv2d #("weight/conv2d_0/2.txt", 2, 0, 64, 64) conv2d_0_conv2d_2(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[2])
);
conv2d #("weight/conv2d_0/3.txt", 2, 0, 64, 64) conv2d_0_conv2d_3(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[3])
);
conv2d #("weight/conv2d_0/4.txt", 2, 0, 64, 64) conv2d_0_conv2d_4(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[4])
);
conv2d #("weight/conv2d_0/5.txt", 2, 0, 64, 64) conv2d_0_conv2d_5(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[5])
);
conv2d #("weight/conv2d_0/6.txt", 2, 0, 64, 64) conv2d_0_conv2d_6(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[6])
);
conv2d #("weight/conv2d_0/7.txt", 2, 0, 64, 64) conv2d_0_conv2d_7(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[7])
);
conv2d #("weight/conv2d_0/8.txt", 2, 0, 64, 64) conv2d_0_conv2d_8(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[8])
);
conv2d #("weight/conv2d_0/9.txt", 2, 0, 64, 64) conv2d_0_conv2d_9(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[9])
);
conv2d #("weight/conv2d_0/10.txt", 2, 0, 64, 64) conv2d_0_conv2d_10(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[10])
);
conv2d #("weight/conv2d_0/11.txt", 2, 0, 64, 64) conv2d_0_conv2d_11(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[11])
);
conv2d #("weight/conv2d_0/12.txt", 2, 0, 64, 64) conv2d_0_conv2d_12(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[12])
);
conv2d #("weight/conv2d_0/13.txt", 2, 0, 64, 64) conv2d_0_conv2d_13(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[13])
);
conv2d #("weight/conv2d_0/14.txt", 2, 0, 64, 64) conv2d_0_conv2d_14(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[14])
);
conv2d #("weight/conv2d_0/15.txt", 2, 0, 64, 64) conv2d_0_conv2d_15(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[15])
);
conv2d #("weight/conv2d_0/16.txt", 2, 0, 64, 64) conv2d_0_conv2d_16(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[16])
);
conv2d #("weight/conv2d_0/17.txt", 2, 0, 64, 64) conv2d_0_conv2d_17(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[17])
);
conv2d #("weight/conv2d_0/18.txt", 2, 0, 64, 64) conv2d_0_conv2d_18(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[18])
);
conv2d #("weight/conv2d_0/19.txt", 2, 0, 64, 64) conv2d_0_conv2d_19(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[19])
);
conv2d #("weight/conv2d_0/20.txt", 2, 0, 64, 64) conv2d_0_conv2d_20(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[20])
);
conv2d #("weight/conv2d_0/21.txt", 2, 0, 64, 64) conv2d_0_conv2d_21(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[21])
);
conv2d #("weight/conv2d_0/22.txt", 2, 0, 64, 64) conv2d_0_conv2d_22(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[22])
);
conv2d #("weight/conv2d_0/23.txt", 2, 0, 64, 64) conv2d_0_conv2d_23(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[23])
);
conv2d #("weight/conv2d_0/24.txt", 2, 0, 64, 64) conv2d_0_conv2d_24(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[24])
);
conv2d #("weight/conv2d_0/25.txt", 2, 0, 64, 64) conv2d_0_conv2d_25(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[25])
);
conv2d #("weight/conv2d_0/26.txt", 2, 0, 64, 64) conv2d_0_conv2d_26(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[26])
);
conv2d #("weight/conv2d_0/27.txt", 2, 0, 64, 64) conv2d_0_conv2d_27(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[27])
);
conv2d #("weight/conv2d_0/28.txt", 2, 0, 64, 64) conv2d_0_conv2d_28(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[28])
);
conv2d #("weight/conv2d_0/29.txt", 2, 0, 64, 64) conv2d_0_conv2d_29(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[29])
);
conv2d #("weight/conv2d_0/30.txt", 2, 0, 64, 64) conv2d_0_conv2d_30(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[30])
);
conv2d #("weight/conv2d_0/31.txt", 2, 0, 64, 64) conv2d_0_conv2d_31(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[31])
);
conv2d #("weight/conv2d_0/32.txt", 2, 0, 64, 64) conv2d_0_conv2d_32(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[32])
);
conv2d #("weight/conv2d_0/33.txt", 2, 0, 64, 64) conv2d_0_conv2d_33(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[33])
);
conv2d #("weight/conv2d_0/34.txt", 2, 0, 64, 64) conv2d_0_conv2d_34(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[34])
);
conv2d #("weight/conv2d_0/35.txt", 2, 0, 64, 64) conv2d_0_conv2d_35(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[35])
);
conv2d #("weight/conv2d_0/36.txt", 2, 0, 64, 64) conv2d_0_conv2d_36(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[36])
);
conv2d #("weight/conv2d_0/37.txt", 2, 0, 64, 64) conv2d_0_conv2d_37(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[37])
);
conv2d #("weight/conv2d_0/38.txt", 2, 0, 64, 64) conv2d_0_conv2d_38(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[38])
);
conv2d #("weight/conv2d_0/39.txt", 2, 0, 64, 64) conv2d_0_conv2d_39(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[39])
);
conv2d #("weight/conv2d_0/40.txt", 2, 0, 64, 64) conv2d_0_conv2d_40(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[40])
);
conv2d #("weight/conv2d_0/41.txt", 2, 0, 64, 64) conv2d_0_conv2d_41(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[41])
);
conv2d #("weight/conv2d_0/42.txt", 2, 0, 64, 64) conv2d_0_conv2d_42(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[42])
);
conv2d #("weight/conv2d_0/43.txt", 2, 0, 64, 64) conv2d_0_conv2d_43(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[43])
);
conv2d #("weight/conv2d_0/44.txt", 2, 0, 64, 64) conv2d_0_conv2d_44(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[44])
);
conv2d #("weight/conv2d_0/45.txt", 2, 0, 64, 64) conv2d_0_conv2d_45(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[45])
);
conv2d #("weight/conv2d_0/46.txt", 2, 0, 64, 64) conv2d_0_conv2d_46(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[46])
);
conv2d #("weight/conv2d_0/47.txt", 2, 0, 64, 64) conv2d_0_conv2d_47(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[47])
);
conv2d #("weight/conv2d_0/48.txt", 2, 0, 64, 64) conv2d_0_conv2d_48(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[48])
);
conv2d #("weight/conv2d_0/49.txt", 2, 0, 64, 64) conv2d_0_conv2d_49(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[49])
);
conv2d #("weight/conv2d_0/50.txt", 2, 0, 64, 64) conv2d_0_conv2d_50(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[50])
);
conv2d #("weight/conv2d_0/51.txt", 2, 0, 64, 64) conv2d_0_conv2d_51(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[51])
);
conv2d #("weight/conv2d_0/52.txt", 2, 0, 64, 64) conv2d_0_conv2d_52(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[52])
);
conv2d #("weight/conv2d_0/53.txt", 2, 0, 64, 64) conv2d_0_conv2d_53(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[53])
);
conv2d #("weight/conv2d_0/54.txt", 2, 0, 64, 64) conv2d_0_conv2d_54(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[54])
);
conv2d #("weight/conv2d_0/55.txt", 2, 0, 64, 64) conv2d_0_conv2d_55(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[55])
);
conv2d #("weight/conv2d_0/56.txt", 2, 0, 64, 64) conv2d_0_conv2d_56(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[56])
);
conv2d #("weight/conv2d_0/57.txt", 2, 0, 64, 64) conv2d_0_conv2d_57(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[57])
);
conv2d #("weight/conv2d_0/58.txt", 2, 0, 64, 64) conv2d_0_conv2d_58(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[58])
);
conv2d #("weight/conv2d_0/59.txt", 2, 0, 64, 64) conv2d_0_conv2d_59(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[59])
);
conv2d #("weight/conv2d_0/60.txt", 2, 0, 64, 64) conv2d_0_conv2d_60(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[60])
);
conv2d #("weight/conv2d_0/61.txt", 2, 0, 64, 64) conv2d_0_conv2d_61(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[61])
);
conv2d #("weight/conv2d_0/62.txt", 2, 0, 64, 64) conv2d_0_conv2d_62(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[62])
);
conv2d #("weight/conv2d_0/63.txt", 2, 0, 64, 64) conv2d_0_conv2d_63(
	.clk(clk),
	.rst(rst),
	.input_valid(input_valid),
	.load(load),
	.load_success(),
	.output_valid(),
	.sof(sof),
	.o_sof(),
	.d_in(d_in),
	.d_out(d_out[63])
);
endmodule